CS122 Assignment 5 - B+ Tree Indexes - Design Document
======================================================

A:  Logistics
-------------

A1.  List your team name and the people who worked on this assignment.

     bbb

     Ryan Batterman
     Aleksander Bello
     Ronnel Boettcher

A2.  Specify the tag name and commit-hash of the Git version you are
     submitting for your assignment.  (You can list the commit hashes
     of your repository tags with this command:  git show-ref --tags)

     Tag name:     <tag>
     Commit hash:  <hash>

A3.  Specify any late tokens you are applying to this assignment, or
     "none" if no late tokens.

A4.  Briefly describe what parts of the assignment each teammate focused on.
     Aleksander and Ronnel worked on part 2, adding support for B-Tree 
     Indexes. They also implemented the limit node (LimitNode.java). 
     Ryan worked on part 1 of the assignment.

B:  Analysis of Implementation
------------------------------

B1.  What is the total size of the index's search-key for the primary-key
     index, in bytes?  Break down this size into its individual components;
     be as detailed as possible.  (You don't need to go lower than the
     byte-level in your answer, but you should show what each byte is a
     part of.)

     Each search key needs 4 bytes to store the integer type key.

B2.  What is the maximum number of search-keys that can be stored in leaf
     nodes of NanoDB's B+ tree implementation?  You should assume the
     default page-size of 8192 bytes.

     Each key needs to have 1 byte for null flags, and needs at least 1 byte
     for the key data. Let K := the number of keys, P := the number of
     pointers. I assume that the rightmost leafnode can have a terminal
     search-key (i.e. the last entry is not a pointer). Then K = P -->
     4P = 8192 --> P = 2048

B3.  What is the maximum number of keys that can be stored in inner nodes
     of this particular implementation?  (Recall that every key must have
     a page-pointer on either side of the key.)

     K = P - 1. 2K + 2P = 8192 --> 2(P - 1) + 2P = 8192 --> P = 2048.5
     --> 2047 (after rounding down).

B4.  In this implementation, leaf nodes do not reference the previous
     leaf, only the next leaf.  When splitting a leaf into two leaves,
     what is the maximum number of leaf nodes that must be read or written,
     in order to properly manage the next-leaf pointers?

     By lecture 12, page 21, when splitting a leaf node, the new node
     is always to the right of the node. Hence, we don't need to reference
     the previous (left) leaf. --> 2

     If leaves also contained a previous-leaf pointer, what would the
     answer be instead?

     Since we don't need the previous leaf pointer, it's the same. 2.

B5.  In this implementation, nodes do not store a page-pointer to their
     parent node.  This makes the update process somewhat complicated, as
     we must save the sequence of page-numbers we traverse as we navigate
     from root to leaf.  If a node must be split, or if entries are to be
     relocated from a node to its siblings, the node’s parent-node must
     be retrieved, and the parent’s contents must be scanned to determine
     the node’s sibling(s).

     Consider an alternate B+ tree implementation in which every node
     stores a page-pointer to the node’s parent.  In the case of splitting
     an inner node, what performance-related differences are there between
     this alternate representation and the given implementation, where
     nodes do not record their parents?  Which one would you recommend?
     Justify your answer.

     Advantages of alternative representation:
     * Don't need to do traversals in order to identify the parent.
     * Implementational simplicity; don't need to carry around the
       traversals everywhere.

     Disadvantages:
     * An extra 2 bytes is used to store the parent pointer in the inner
       pages.

     I would thus recommend using the alternative representation if aiming
     for simplicity of the codebase; otherwise, I'd use this one because
     it uses pages slightly more efficiently.


B6.  It should be obvious how indexes can be used to enforce primary keys,
     but what role might they play with foreign keys?  For example, given
     this schema:

     CREATE TABLE t1 (
         id INTEGER PRIMARY KEY
     );

     CREATE TABLE t2 (
         id INTEGER REFERENCES t1;
     );

     Why might we want to build an index on t2.id?

     Building an index on t2.id implies enforcing a uniqueness constraint
     on id's value. If t2 references t1's primary key t1.id then t2.id 
     must be unique as well. Thus, an index on t2.id enforces the 
     constraint that foreign key references to primary keys of other 
     tables must be unique. 

E:  Extra Credit [OPTIONAL]
---------------------------

If you implemented any extra-credit tasks for this assignment, describe
them here.  The description should be like this, with stuff in "<>" replaced.
(The value i starts at 1 and increments...)

E<1>:  <Limit node implementation>

     <We added the file nanodb/plans/LimitNode.java, which implements the limit
     clause. This is done by simply outputting tuples until the limit is reached.
     We also modified the nanodb/qeval/CostBasedJoinPlanner.java to use the limit
     node, by wrapping the plan node in a LimitNode if limit is not 0 (the
     default, no limit case).>

     <We added tests of the limit node, test/nanodb/sql/TestLimit.java, and added
     a table used for testing in the test/nandob/sql/test_sql.props file. The 
     test file tests for a simple limit case, testing when limit is 0, testing 
     when the limit is equal to the number of rows, and testing when the limit is
     more than the number of rows.>

F:  Feedback [OPTIONAL]
-----------------------

These questions are optional, and they obviously won't affect your grade
in any way (including if you hate everything about the assignment and
databases in general, or Donnie and the TAs in particular).

NOTE:  If you wish to give anonymous feedback, a similar survey will be
       made available on the Moodle.  

F1.  How many hours total did your team spend on this assignment?
     (That is, the sum of each teammate's time spent on the assignment.)

F2.  What parts of the assignment were most time-consuming?

F3.  Which parts of the assignment did you particularly enjoy?

F4.  Which parts did you particularly dislike?

F5.  Do you have any suggestions for how future versions of the
     assignment can be improved?
