CS122 Assignment 1 - NanoDB Set-Up and Storage - Design Document
================================================================

A:  Logistics
-------------

A1.  List your team name and the people who worked on this assignment.

     bbb

     Ryan Batterman
     Alexander Bello
     Ronnell Boettcher

A2.  Specify the tag name and commit-hash of the Git version you are
     submitting for your assignment.  (You can list the commit hashes
     of your repository tags with this command:  git show-ref --tags)

     Tag name:     <tag>
     Commit hash:  <hash>

A3.  Specify any late tokens you are applying to this assignment, or
     "none" if no late tokens.

     none

A4.  Briefly describe what parts of the assignment each teammate focused on.

     Ryan focused on the `Storage Performance` part; Bello on the `Tuple
     Updates and Deletion` part; Ronnell on the pinning/unpinning part.

B:  Deleting and Updating Tuples
--------------------------------

B1.  Briefly describe (1-3 sentences) how you reclaim slot entries in
     the slotted page.  Which slot entries are you able to reclaim?

B2.  Briefly outline the steps of what your setNullColumnValue() function
     does.  You don't have to go into much detail; we can look at your
     code for the details.  Just describe the basic things the function
     must do to set a column-value to NULL.

B3.  Similarly, briefly outline the steps of what your
     setNonNullColumnValue() function does.

C:  Unpinning Tuples and Pages
------------------------------

C1.  Briefly describe your strategy for determining when tuples need to
     be unpinned.  Make sure to comment on plan-nodes and commands.

C2.  In general, you only need to worry about unpinning tuples because
     the backing page will also be unpinned.  However, there are some
     situations when DBPages themselves must be unpinned directly.
     Describe any situations where you unpin pages directly in your
     implementation, and why you do so.  (Make sure to answer this
     question in the context of your insert-optimization changes.)

D:  NanoDB Storage Performance
------------------------------

D1.  In 3-5 sentences, describe your general approach for improving the
     performance of inserts, including what general file-level structuring
     you use of blocks.

     Non-full blocks are arranged in a singly linked linkedlist (where "full" is
     defined in D5). To insert a new tuple into the the DB, we loop through
     this linkedlist and identify the first block in which can store it. Blocks
     in the linkedlist point to the next element in the list by storing the
     index of the next element in their final 2 bytes.

D2.  Does your file-level organization have the potential to increase the
     number of large disk seeks when performing inserts?  What steps do
     you take, if any, to reduce the number of disk seeks?

     This file organization does, indeed, have the potential to increase the
     number of large disk seeks. If blocks in the linkedlist are out of order,
     then we might end up doing a lot of seeks to traverse the list.

     We don't take any steps to reduce this effect.

D3.  What steps must be taken during a tuple-delete operation to update
     your file-level structures?  How many pages must be written to?

     * If, after deleting the new tuple, the block A will become un-full (but
       it was full beforehand) -- then we perform the following to the
       linkedlist structure:

       0 -> B ; A
       becomes:
       0 -> A -> B

       (for 0 the header page).

     * We delete the tuple in the page.

     If we don't need to do the first part, then 1 page is written to; otherwise,
     2 are.

D4.  What steps must be taken after a tuple-insert operation that fills
     the data page?

     Suppose you have A -> B -> C, and B becomes filled after the insert. Then
     we update the structure to A -> C ; B (i.e. B is out of the linkedlist).

D5.  Describe your criteria for when a page is considered to be "full."

     A page is considered full iff it has free space of size < the minimum size of
     any tuple of the table schema.

     (In my code, I refer to "free" as the opposite of "full")

E:  Feedback [OPTIONAL]
-----------------------

These questions are optional, and they obviously won't affect your grade
in any way (including if you hate everything about the assignment and
databases in general, or Donnie and the TAs in particular).

NOTE:  If you wish to give anonymous feedback, a similar survey will be
       made available on the Moodle.  


E1.  How many hours total did your team spend on this assignment?
     (That is, the sum of each teammate's time spent on the assignment.)

E2.  What parts of the assignment were most time-consuming?
    The update took a few tries to get right, as there were some tricky cases to
    be handled.

E3.  Which parts of the assignment did you particularly enjoy?

E4.  Which parts did you particularly dislike?

E5.  Do you have any suggestions for how future versions of the
     assignment can be improved?
